
Basic Sanity Checks for a Replicated "Stag Hunt in the Matrix – Arena" Environment

1. **Observation shape** – Verify that each agent receives an 11×11 off‑centre observation window (9 rows forward, 1 row behind, 5 columns to either side) as specified in the original environment’s confighttps://raw.githubusercontent.com/google-deepmind/meltingpot/main/meltingpot/configs/substrates/stag_hunt_in_the_matrix__arena.py#:~:text=The%20map%20configuration%20is%20different,hare_%20resources%20than%20_stag_%20resources.
2. **Action space** – Confirm that the primitive action set consists of eight actions: NOOP, FORWARD, STEP_RIGHT, BACKWARD, STEP_LEFT, TURN_LEFT, TURN_RIGHT and INTERACT (the interaction beam). The agent’s action specification should match the original orderhttps://raw.githubusercontent.com/google-deepmind/meltingpot/main/meltingpot/configs/substrates/stag_hunt_in_the_matrix__arena.py#:~:text=%7D%2C%20%7B%20,50.
3. **Resource distribution** – Check that the environment initializes with two resource classes (“stag” and “hare”) placed according to the ASCII map from the original config (there are more hare resources than stag resources).
4. **Resource regeneration** – Ensure resources respawn after being collected or destroyed according to the parameters `regenerationDelay = 10` and `regenerationRate = 0.04`https://raw.githubusercontent.com/google-deepmind/meltingpot/main/meltingpot/configs/substrates/stag_hunt_in_the_matrix__arena.py#:~:text=. After destruction, resources should require three zaps to destroy (`initialHealth` = 3).
5. **Interaction readiness** – Verify that the environment enforces `disallowUnreadyInteractions` so that players cannot interact until both have collected at least one resourcehttps://raw.githubusercontent.com/google-deepmind/meltingpot/main/meltingpot/configs/substrates/stag_hunt_in_the_matrix__arena.py#:~:text=%7B%20,True. The `ReadyToShoot` observation should indicate when the zapper is readyhttps://raw.githubusercontent.com/google-deepmind/meltingpot/main/meltingpot/configs/substrates/stag_hunt_in_the_matrix__arena.py#:~:text=,.
6. **Zapper behaviour** – Confirm that the `GameInteractionZapper` parameters match the original: `cooldownTime = 2`, `beamLength = 3`, `beamRadius = 1`, `framesTillRespawn = 50`, and that interactions reset both players’ inventories (`reset_winner_inventory` and `reset_loser_inventory`) and remove both players (`losingPlayerDies` and `winningPlayerDies`)https://raw.githubusercontent.com/google-deepmind/meltingpot/main/meltingpot/configs/substrates/stag_hunt_in_the_matrix__arena.py#:~:text=%7D%2C%20%7B%20,True. The freeze period after interactions (`freezeOnInteraction` = 16 frames) should also be respectedhttps://raw.githubusercontent.com/google-deepmind/meltingpot/main/meltingpot/configs/substrates/stag_hunt_in_the_matrix__arena.py#:~:text=,16.
7. **Ready markers and metrics** – Check that ready‑to‑interact markers and metrics (e.g., `INTERACTION_INVENTORIES`) are produced as in the original config. Ensure that the `ReadyToShoot` observation and avatar markers toggle appropriately.
8. **Inventory and reward logic** – Validate that inventories update correctly on resource collection, destruction, and interaction (e.g., players’ inventories are reset after interactions). Also check that rewards follow the Stag Hunt payoff matrix when interactions occur.
9. **Episode and timestep properties** – Ensure the environment resets properly after each episode and that the maximum episode length (5000 frames in the arena version) and stochastic termination mechanics are implemented.
10. **Spawn points and map integrity** – Confirm that spawn points correspond to the positions marked `P` in the ASCII map and that players spawn correctly. The map layout (walls, passable tiles, resources) should match the reference environment.

These checks help ensure that your replicated environment behaves consistently with the official Melting Pot implementation.
