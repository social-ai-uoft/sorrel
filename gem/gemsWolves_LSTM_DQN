from gem.utils import (
    updateEpsilon,
    updateMemories,
    findMoveables,
    transferWorldMemories,
    findAgents,
)
from gem.environment.elements.element import EmptyObject, Wall
from models.cnn_lstm_dqn import Model_CNN_LSTM_DQN
from gemworld.gemsWolves_experimental import WolfsAndGems
import matplotlib.pyplot as plt
from astropy.visualization import make_lupton_rgb
import torch.nn as nn
import torch.nn.functional as F
from DQN_utils import save_models, load_models, make_video

save_dir = "/Users/wil/Dropbox/Mac/Documents/gemOutput_experimental/"


def createModels():
    """
    Should make the sequence length of the LSTM part of the model and an input here
    Should also set up so that the number of hidden laters can be added to dynamically
    in this function. Below should fully set up the NN in a flexible way for the studies
    """
    models = []
    models.append(Model_CNN_LSTM_DQN(5, 0.0001, 1000, 650, 75, 30, 4))  # agent model
    models.append(Model_CNN_LSTM_DQN(5, 0.0001, 1000, 2570, 150, 30, 4))  # wolf model
    return models


worldSize = 15

trainableModels = [0, 1]
sync_freq = 500
modelUpdate_freq = 25
epsilon = 0.99

turn = 1

models = createModels()
env = WolfsAndGems(
    height=worldSize,
    width=worldSize,
    layers=1,
    defaultObject=EmptyObject(),
    gem1p=0.03,
    gem2p=0.02,
    wolf1p=0.01,
)
env.gameTest()


def runGame(
    models,
    env,
    turn,
    epsilon,
    epochs=10000,
    maxTurns=100,
):
    losses = 0
    gamePoints = [0, 0]
    for epoch in range(epochs):
        done, withinTurn = 0, 0

        # create a new gameboard for each epoch and repopulate
        # the resset does allow for different params, but when the world size changes, odd
        # TODO: need to look at why changing the world size keeps walls at the original location
        env.reset_env(
            height=worldSize,
            width=worldSize,
            layers=1,
            gem1p=0.03,
            gem2p=0.02,
            wolf1p=0.01,
        )
        for i, j in findMoveables(env.world):
            # reset the memories for all agents
            # the parameter sets the length of the sequence for LSTM
            env.world[i, j, 0].init_replay(3)

        while done == 0:
            turn = turn + 1
            withinTurn = withinTurn + 1

            if epoch % sync_freq == 0:
                # update the double DQN model ever sync_frew
                for mods in trainableModels:
                    models[mods].model2.load_state_dict(
                        models[mods].model1.state_dict()
                    )

            # take one step of the game for all agents
            gamePoints = env.step(models, gamePoints, epsilon)

            # determine whether the game is finished (either max length or all agents are dead)
            if withinTurn > maxTurns or len(findAgents(env.world)) == 0:
                done = 1

            if len(trainableModels) > 0:
                # this updates the last memory to be the final state of the game board
                env.world = updateMemories(
                    models, env.world, findMoveables(env.world), done, endUpdate=True
                )
                # transfer the events for each agent into the appropriate model after all have moved
                models = transferWorldMemories(
                    models, env.world, findMoveables(env.world)
                )

            if withinTurn % modelUpdate_freq == 0:
                # trains all networks after modelUpdate_freq turns
                for mods in trainableModels:
                    loss = models[mods].training(150, 0.9)
                    losses = losses + loss.detach().numpy()

        # train at the end of each epoch
        for mods in trainableModels:
            loss = models[mods].training(150, 0.9)
            losses = losses + loss.detach().numpy()

        updateEps = False
        # TODO: the updateEpsilon often does strange things. Needs to be reconceptualized
        if updateEps == True:
            epsilon = updateEpsilon(epsilon, turn, epoch)

        if epoch % 100 == 0 and len(trainableModels) > 0:
            # print the state and update the counters. This should be made to be tensorboard instead
            print(epoch, withinTurn, gamePoints, losses, epsilon)
            gamePoints = [0, 0]
            losses = 0
    return models, env, turn, epsilon


"""
TEST SOME MODELS
TODO: Once stable, these should be in a separate file for training models
"""

runParams = (
    [0.9, 1000, 5],
    [0.8, 5000, 5],
    [0.7, 5000, 5],
    [0.2, 5000, 5],
    [0.8, 10000, 25],
    [0.6, 10000, 35],
    [0.2, 10000, 35],
    [0.2, 20000, 50],
)

for modRun in range(len(runParams)):
    models, env, turn, epsilon = runGame(
        models,
        env,
        turn,
        runParams[modRun][0],
        epochs=runParams[modRun][1],
        maxTurns=runParams[modRun][2],
    )
    save_models(models, save_dir, "newWolvesAndAgents" + str(modRun))


make_video("test_new", save_dir, models, 50, env)
